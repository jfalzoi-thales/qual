from time import sleep
import sys
import subprocess
from common.gpb.python import CPULoading_pb2
from common.tzmq.ThalesZMQMessage import ThalesZMQMessage
import module
import CPULoader

## CPULoading Class Module
#
class CPULoading(module.Module):
    ## Constructor
    #  @param     self
    def __init__(self):
        ## initializes parent class
        super(CPULoading, self).__init__({})
        ## indicates whether or not a CPU load has been set
        self.active = False
        ## initializes CPULoader thread which continually gathers CPU load information
        self.loader = CPULoader.CPULoader()
        ## starts CPULoader thread
        self.loader.start()
        ## adds CPULoading handler to available message handlers
        self.addMsgHandler(CPULoading_pb2.CPULoadingRequest, self.handler)

    ## Handles incoming messages
    #
    #  Receives zmq request and runs requested process
    #
    #  @param     self
    #  @param     msg       zmq format message
    #  @return    reply     a CPULoadingResponse object
    def handler(self, msg):
        reply = CPULoading_pb2.CPULoadingResponse()

        if msg.body.requestType == CPULoading_pb2.CPULoadingRequest.RUN:
            if msg.body.level != 0:
                reply = self.start(msg.body.level)
            else:
                reply = self.start()
        elif msg.body.requestType == CPULoading_pb2.CPULoadingRequest.STOP:
            reply = self.stop()
        elif msg.body.requestType == CPULoading_pb2.CPULoadingRequest.REPORT:
            reply = self.report()
        else:
            print("Unexpected Value")

        return reply

    ## Starts lookbusy process to mimic specific CPU loads
    #
    #  Uses console commands to remove previous lookbusy instances, starts a new CPU load, and reports current CPU load
    #
    #  @param     self
    #  @param     level         integer to specify percentage of CPU load [DEFAULT = 80]
    #  @return    self.report() a CPULoadingResponse object generated by report() function
    def start(self, level = 80):
        self.active = True

        ## kills any stray lookbusy instances and waits for pkill to complete
        subprocess.Popen(["sudo", "pkill", "-9", "lookbusy"]).communicate()

        if level in range(0, 100):
            ## starts lookbusy instance
            subprocess.Popen(["/usr/local/bin/lookbusy", "-qc", str(int(level))])
            sleep(1)
        else:
            print("Unexpected Value")

        return self.report()

    ## Stops CPU load from lookbusy instances
    #
    #  Uses console commands to remove lookbusy instances and reports current CPU load
    #
    #  @param     self
    #  @return    self.report() a CPULoadingResponse object generated by report() function
    def stop(self):
        self.active = False
        ## kills lookbusy instances and waits for pkill to complete
        subprocess.Popen(["sudo", "pkill", "-9", "lookbusy"]).communicate()

        return self.report()

    ## Reports current CPU load information provided by linux
    #
    #  Polls CPULoader thread for CPU load information and creates CPULoadingResponse object
    #
    #  @param     self
    #  @return    loadResponse     a CPULoadingResponse object
    def report(self):
        results = self.loader.getcpuload()
        loadResponse = CPULoading_pb2.CPULoadingResponse()

        if self.active == True:
            loadResponse.state = CPULoading_pb2.CPULoadingResponse.RUNNING
        else:
            loadResponse.state = CPULoading_pb2.CPULoadingResponse.STOPPED

        if results != {}:
            loadResponse.totalUtilization = results["cpu"]

        for key, value in results.items():
            if key != "cpu":
                loadResponse.coreUtilization.append(value)

        return loadResponse

    ## Attempts to terminate module gracefully
    #
    #  Kills lookbusy processes, sends quit flag to CPULoader thread, and exits module
    #
    #  @param     self
    #  @return    loadResponse     a CPULoadingResponse object
    def terminate(self):
        subprocess.Popen(["sudo", "pkill", "-9", "lookbusy"]).communicate()
        self.loader.quit = True
        self.active = False
        sleep(2)
        sys.exit()

## Local Unit Test
#
#  Tests module functionality with simulated messages
#
if __name__=='__main__':
    def testprint(tzmq):
        print("Load Running: {} [0 is NO, 1 is YES]".format(tzmq.state))
        print("Total Untilization: {}".format(tzmq.totalUtilization))
        print("Core Untilization: {}\n".format(tzmq.coreUtilization))


    test = CPULoading()
    message = CPULoading_pb2.CPULoadingRequest()

    sleep(3)

    ## test REPORT message input before CPU load
    message.requestType = CPULoading_pb2.CPULoadingRequest.REPORT
    request = ThalesZMQMessage("CPULoading_pb2.CPULoadingRequest", message)
    out = test.handler(request)

    print("REPORT before CPU load:")
    testprint(out)
    sleep(3)

    ## test RUN message with default level input and report
    message.requestType = CPULoading_pb2.CPULoadingRequest.RUN
    request = ThalesZMQMessage("CPULoading_pb2.CPULoadingRequest", message)
    out = test.handler(request)

    print("RUN with default level and report:")
    testprint(out)
    sleep(3)

    ## test REPORT message input after CPU load
    message.requestType = CPULoading_pb2.CPULoadingRequest.REPORT
    request = ThalesZMQMessage("CPULoading_pb2.CPULoadingRequest", message)
    out = test.handler(request)

    print("REPORT after CPU load:")
    testprint(out)
    sleep(3)

    ## test additional RUN with custom level
    message.requestType = CPULoading_pb2.CPULoadingRequest.RUN
    message.level = 50
    request = ThalesZMQMessage("CPULoading_pb2.CPULoadingRequest", message)
    out = test.handler(request)

    print("RUN again with custom level while previous load running:")
    testprint(out)
    sleep(3)

    ## test REPORT message input after additional RUN and custom level
    message.requestType = CPULoading_pb2.CPULoadingRequest.REPORT
    request = ThalesZMQMessage("CPULoading_pb2.CPULoadingRequest", message)
    out = test.handler(request)

    print("REPORT after starting additional load with custom level:")
    testprint(out)
    sleep(3)

    ## test STOP message input and report
    message.requestType = CPULoading_pb2.CPULoadingRequest.STOP
    request = ThalesZMQMessage("CPULoading_pb2.CPULoadingRequest", message)
    out = test.handler(request)

    print("STOP and report:")
    testprint(out)
    sleep(3)

    ## test REPORT message input after CPU load stop
    message.requestType = CPULoading_pb2.CPULoadingRequest.REPORT
    request = ThalesZMQMessage("CPULoading_pb2.CPULoadingRequest", message)
    out = test.handler(request)

    print("REPORT after stopping load:")
    testprint(out)
    sleep(3)

    ## test STOP with no load
    message.requestType = CPULoading_pb2.CPULoadingRequest.STOP
    request = ThalesZMQMessage("CPULoading_pb2.CPULoadingRequest", message)
    out = test.handler(request)

    print("STOP with no load:")
    testprint(out)
    sleep(3)

    ## test REPORT message input after stopping with no load
    message.requestType = CPULoading_pb2.CPULoadingRequest.REPORT
    request = ThalesZMQMessage("CPULoading_pb2.CPULoadingRequest", message)
    out = test.handler(request)

    print("REPORT after stopping with no load:")
    testprint(out)
    sleep(3)

    test.terminate()