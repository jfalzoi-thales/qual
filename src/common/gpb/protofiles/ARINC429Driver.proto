package mpsqual;

message Request {
	enum RequestTypeEnum {
		RECEIVE_DATA = 1;
		GET_OCCUPANCY = 2;
		GET_CONFIG = 3;
		TRANSMIT_DATA = 4;
		SET_CONFIG = 5;
	}
	
    required string channelName = 1;
    required RequestTypeEnum type = 2;
	
    oneof param {
        OutputData outputData = 3;
        ChannelConfig config = 4; 
    }
}

message Response {
	enum ResponseTypeEnum {
		INPUT_DATA = 1;
		OCCUPANCY = 2;
		CONFIG = 3;
		STATUS = 4;
	}
	
	enum ErrorCodeEnum {
		NONE = 0;
		NOT_SUPPORTED = 1;
		INVALID_REQ = 2;
		INVALID_CHANNEL = 3;
		INVALID_CONFIG = 4;
		OPERATION_FAILED = 5;
		OPERATION_NOT_AVAILABLE = 6;
		NO_SPACE = 7;
		OTHER = 8;
	}
	
    required string channelName = 1;
    required ResponseTypeEnum type = 2;
    required ErrorCodeEnum errorCode = 3;
	
    oneof param {
        InputData inputData = 4;
        ChannelConfig config = 5;
        uint32 occupancy = 6;
    }
}
message Event {
	enum EventTypeEnum {
		DATA_READY = 1;
		OVERWRITE = 2;
		DRIVER_ERROR = 3;
		DEVICE_ERROR = 4;
	}
	
	enum ErrorCodeEnum {
		NONE = 0;
		NOT_SUPPORTED = 1;
		INVALID_REQ = 2;
		INVALID_CHANNEL = 3;
		INVALID_CONFIG = 4;
		OPERATION_FAILED = 5;
		OPERATION_NOT_AVAILABLE = 6;
		NO_SPACE = 7;
		OTHER = 8;
	}
	
    optional string channelName = 1;
    required EventTypeEnum type = 2;
    required ErrorCodeEnum errorCode = 3;
    optional ChannelConfig config = 4;
}
message ChannelConfig {
	enum RateEnum {
		LOW = 1;
		HIGH = 2;
	}
	
	enum LabelOrderEnum {
		NORMAL = 1;
		REVERSED = 2;
	}
	
	enum ParitySenseEnum {
		ODD  = 1;
		EVEN = 2;
	}
	
    required RateEnum rate = 1;
    required LabelOrderEnum labelOrder = 2;
    required bool parityEnable = 3;
    optional ParitySenseEnum paritySense = 4;
    optional SDIFilter sdiFilter = 5;
    optional LabelFilter labelFilter = 6;
}

message SDIFilter {
    required bool enable = 1;
    required int32 value = 2;
}

message LabelFilter {
    required bool enable = 1;
    required bytes labelMap = 2;
}

message InputData {
    required bool overwrite = 1;
    repeated Word data = 2;
}

message Word {
    required uint32 data = 1;
    required uint64 timestamp = 2;
}

message OutputData {
    repeated Word data = 1;
}