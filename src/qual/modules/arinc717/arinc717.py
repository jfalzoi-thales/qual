import os
from common.gpb.python import ARINC717Frame_pb2
from common.tzmq.ThalesZMQClient import ThalesZMQClient
from common.tzmq.ThalesZMQMessage import ThalesZMQMessage
from common.gpb.python.ARINC717Driver_pb2 import Request, Response
from common.module import module

## ARINC717 Module
#
class ARINC717(module.Module):
    ## Constructor
    #  @param   self
    #  @param   config  Configuration for this module instance
    def __init__(self, config = {}):
        # Initialize parent class
        super(ARINC717, self).__init__({})
        # Add handler to available message handlers
        self.addMsgHandler(ARINC717Frame_pb2.ARINC717FrameRequest, self.handler)

        # Ensure directory for communication with ARINC717 driver is present
        ipcdir = "/tmp/arinc/driver/717"
        if not os.path.exists(ipcdir):
            os.makedirs(ipcdir)

        ## Connection to ARINC717 driver
        self.driverClient = ThalesZMQClient("ipc:///tmp/arinc/driver/717/device")

    ## Sends RECEIVE_FRAME request message to the ARINC 717 driver
    #
    #  @param     self
    #  @return    a ThalesZMQMessage object returned from the ARINC 717 driver
    def makeRequest(self):
        request = Request()
        request.type = Request.RECEIVE_FRAME

        return self.driverClient.sendRequest(ThalesZMQMessage(request))

    ## Handles incoming messages
    #
    #  Receives TZMQ request and performs requested action
    #
    #  @param     self
    #  @param     msg       TZMQ format message
    #  @return    a ThalesZMQMessage object containing the response message
    def handler(self, msg):
        reply = ARINC717Frame_pb2.ARINC717FrameResponse()

        if msg.body.requestType == ARINC717Frame_pb2.ARINC717FrameRequest.RUN:
            reply = self.start()
        elif msg.body.requestType == ARINC717Frame_pb2.ARINC717FrameRequest.STOP:
            reply = self.stop()
        elif msg.body.requestType == ARINC717Frame_pb2.ARINC717FrameRequest.REPORT:
            reply = self.report()
        else:
            self.log.error("Unexpected Request Type %d" % (msg.body.requestType))

        return ThalesZMQMessage(reply)

    ## Handles messages with requestType of RUN
    #
    # RUN request type is defined in the ICD, but is not applicable to
    # this module, so we just behave the same as REPORT.
    #
    #  @param     self
    #  @return    an ARINC717FrameResponse object generated by report() function
    def start(self):
        return self.report()

    ## Handles messages with requestType of STOP
    #
    # STOP request type is defined in the ICD, but is not applicable to
    # this module, so we just behave the same as REPORT.
    #
    #  @param     self
    #  @return    an ARINC717FrameResponse object generated by report() function
    def stop(self):
        return self.report()

    ## Handles messages with requestType of REPORT
    #
    #  @param     self
    #  @return    an ARINC717FrameResponse object containing frame status and data
    def report(self):
        reply = ARINC717Frame_pb2.ARINC717FrameResponse()
        info = Response()
        info.ParseFromString(self.makeRequest().serializedBody)

        reply.state = ARINC717Frame_pb2.ARINC717FrameResponse.RUNNING
        reply.syncState = info.frame.out_of_sync
        data = info.frame.data

        ## turns every two characters in data into 16-bit data
        for char in range(0, len(data), 2):
            reply.arinc717frame.append((ord(data[char]) << 8) | ord(data[char + 1]))

        return reply